export interface ISpecialRule {
  key?: string;
  name: string;
  rating?: string | number;
  condition?: string;
  modify?: boolean;
  description?: string;
}

export interface IUnit {
  id: string;
  armyId: string;
  sortId: number;
  category?: string;
  name: string;
  size: number;
  cost: number;
  quality: any;
  defense: any;
  specialRules: ISpecialRule[];
  upgrades: string[];
  equipment: IUpgradeGains[]; // IUpgradeGainsWeapon[]; //IEquipment[];
  disabledUpgradeSections: string[];
  splitPageNumber?: number;
  isNarrative: boolean;
  sync?: { unitId: string };
  valid?: boolean;
  hasBalanceInvalid: boolean;
  hasCustomRule: boolean;
  summoned?: boolean;
  bases: {
    round: string;
    square: string;
  };
  type?: UnitType;
}

export enum UnitType {
  Default,
  NarrativeHero,
  Quest,
}

export interface IUnitSelectionData {
  selectionId: string;
  customName?: string;
  selectedUpgrades: ISelectedUpgrade[];
  loadout: IUpgradeGains[];
  combined: boolean;
  joinToUnit?: string;
  xp: number;
  traits: string[]; // Trait names only
  notes: string;
}

export interface ISelectedUpgrade {
  instanceId: string;
  upgrade: IUpgradeSection;
  option: IUpgradeOption;
}

export interface ISelectedUnit extends IUnit, IUnitSelectionData {}

export type UpgradeVariant = "replace" | "upgrade" | "upgradeRule" | "attachment";

export interface IUpgradeSection {
  id?: string;
  uid?: string;
  label?: string;
  type: "ArmyBookUpgradeSection";
  variant: UpgradeVariant;
  affects?: { type: "any" | "all" | "exactly" | "up to"; value?: number }; // "any" | "all" | number;
  select?: { type: "any" | "all" | "exactly" | "up to"; value?: number }; // "any" | "all" | number;
  targets?: string[];
  model?: boolean;
  options?: IUpgradeOption[];
  isCommandGroup?: boolean;
  isHeroUpgrade?: boolean;
}

export interface IUpgradeOption {
  //id?: string;
  uid?: string;
  parentSectionId: string;
  //cost?: number;
  costs: { unitId: string; cost: number }[];
  label: string;
  isModel?: boolean;
  gains: IUpgradeGains[]; // IEquipment[] | ISpecialRule[];
  replacedWhat?: string[] | string[][];
  type: "ArmyBookUpgradeOption";
}

export interface IUpgradeGains {
  id: string;
  name: string;
  label: string;
  count: number;
  originalCount: number;
  type: "ArmyBookRule" | "ArmyBookWeapon" | "ArmyBookItem";
  attacks?: number;
  dependencies?: IUpgradeDependency[];
  specialRules?: ISpecialRule[];
  isModel?: boolean;
}

export interface IUpgradeGainsItem extends IUpgradeGains {
  content: IUpgradeGains[];
}

export interface IUpgradeGainsWeapon extends IUpgradeGains {
  type: "ArmyBookWeapon";
  attacks: number;
  range: number;
  specialRules: IUpgradeGainsRule[];
  weaponId?: string;
}

export interface IUpgradeGainsRule extends IUpgradeGains {
  type: "ArmyBookRule";
  key: string;
  condition: string;
  modify: boolean; // ?
  rating: string;
}

export interface IUpgradePackage {
  hint: string;
  uid: string;
  sections: IUpgradeSection[];
}

export interface IArmyBook {
  uid: string;
  name: string;
  versionString: string;
  coverImagePath: string;
  coverImageCredit: string;
  bannerImagePath: string;
  isLive: boolean;
  official: boolean;
  enabledGameSystems: number[];
  units: IUnit[];
  upgradePackages: IUpgradePackage[];
  specialRules: ISpecialRule[];
  autogenerated?: boolean;
  spells: ISpell[];
  background: string;
  fullBackground: string;
  partnerSettings: any;
  customRules: any[];
  factionId: string;
  factionName: string;
  factionRelation: string;
  transforms: any[];
  alerts: any[];
  gameSystemId: number;
  bannedAt: string;
  modifiedAt: string;
  username: string;
  gameSystemSlug: string;
  universe: string;
  aberration: string; // TODO: Rename to abbreviation lol
}

export interface ISpell {
  id: string;
  spellbookId: string;
  name: string;
  threshold: number;
  effect: string;
  effectSkirmish?: string;
}

export interface IUpgradeDependency {
  upgradeInstanceId: string;
  count: number;
  variant: UpgradeVariant;
}

export interface IDataSpecialRule {
  id: string;
  name: string;
  description: string;
  descriptionOverride?: {
    skirmish?: string;
    regiments?: string;
  };
  // isUnitRule: boolean;
  // isWeaponRule: boolean;
  // isCommon: boolean;
  // isBase: boolean;
  hasRating: boolean;
  defaultRating?: number;
  costFormula: Object;
  enabledGameSystems: number[];
  armyBooks?: { uid: string; name: string }[];
  aliases: { id: string; name: string }[];
  formulaReferences: { id: string; name: string }[];
  aliasedRuleId?: string;
  ratingValues?: string;
  woundFormula?: string;
  rangedWoundFormula?: string;
  custom?: boolean;
  ruleType: SpecialRuleType;
  targetType: RuleTargetType;
  coreType: RuleCoreType;
  params: any;
}

export enum RuleTargetType {
  Unit = 1,
  Weapon = 2,
  Model = 3,
}

export enum RuleCoreType {
  Common = 1,
  Base = 2,
  Calc = 3,
}

export enum SpecialRuleType {
  Default,
  QuestConsumable,
  QuestInjury,
  CampaignTrait,
  QuestCondition,
  CalcRule,
  BaseRule,
  QuestClass,
}

export interface ITrait {
  name: string;
  description: string;
}

export interface ISkillSet {
  id: string;
  name: string;
  traits: ITrait[];
}

export interface ICampaignData {
  units: ITrait[];
  heroes: ISkillSet[];
  injuries: ITrait[];
  talents: ITrait[];
}

export interface IFullUnit {
  unitSize: number;
  unitPoints: number;
  unitPointsAll: number;
  unit: ISelectedUnit;
  joined?: ISelectedUnit;
  heroes: ISelectedUnit[];
  hasJoined: boolean;
}

export interface IRulesItem {
  count: number;
  name: string;
  specialRules: IUpgradeGainsRule[];
}

export type UpgradeFilter = { packageUid: string; sectionUid: string };

export interface ITransform {
  id: string;
  type: string;
  filter: string[] | UpgradeFilter;
  target: any;
}

// int Flags
export enum BalanceInvalidReasons {
  None = 0,
  Wounds = 1 << 0, // 1 0001
  CustomRules = 1 << 1, // 2 0010
  CalcErrors = 1 << 2, // 4 0100
}
